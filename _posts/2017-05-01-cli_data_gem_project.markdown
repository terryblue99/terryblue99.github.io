---
layout: post
title:  "CLI Data Gem Project"
date:   2017-04-30 22:58:16 -0400
---


The CLI Data Gem project is the final project of 4 after completing the Object Oriented Ruby section of the Learned Verified Course.

**REQUIREMENTS**

1.	Provide a CLI
2.	CLI must provide access to data from a web page.
3.	The data provided must go at least one level deep, generally by showing the user a list of available data and then being able to drill down into a specific item.
4.	Use good OO design patterns. You should be creating a collection of objects - not hashes.
5.	For bonus points, instead of just creating an application, create a gem and for extra bonus points try publishing it to              RubyGems.

I have to admit I felt a little nervous at first because this was the first time undertaking a task without any tests to guide me. However, my nervousness abated somewhat when I saw all the helpful resources that were provided.

**RESOURCES**

* [How to build a ruby gem](http://guides.rubygems.org/make-your-own-gem/)
* [How to publish your gem](http://guides.rubygems.org/publishing/)
* [Environments, Requiring Files, Bundler, and Gems](https://www.youtube.com/watch?v=XBgZLm-sdl8)
* [Video- CLI Data Gem Walkthrough](https://www.youtube.com/watch?v=_lDExWIhYKI)
* [Video- CLI Data Gem Walkthrough: Creating a CLI Scraper Gem](https://www.youtube.com/watch?v=Y5X6NRQi0bU)
* [Video- Common Anti-Patterns in CLI Data Gem](https://www.youtube.com/watch?v=cbMa87oWv08)
* [Video- Student Example 1: Refactoring CLI Data Gem](https://www.youtube.com/watch?v=JEL_PXr74qQ)
* [Video- Student Example 2: Refactoring CLI Data Gem](https://www.youtube.com/watch?v=Lt0oyHiKWIw)

I used the process of first writing out all my goals for completing the project and implemented them one at a time until they passed all tests before moving on to the next.  

Being a big lover of going to the movies I decided to have a go at writing a gem that would scrape the Fandango website for movies coming soon, provide the user with a list of those movies, allow them to select a movie they would like to see more details on, and present them with those details. I started by looking at some of the provided video resources which were a great help in guiding me through the whole process. I thought I was doing really well until I hit a big snag which took me a long time to circumvent.

I had run many tests on my gem as I was creating it and had reached a point where I was satisfied with the final results, so much so that I went to bed that night feeling very proud of myself. The next day I started off by running my gem only to be confronted with it aborting with an error message related to a ‘RuntimeError: HTTP redirection loop’. After some google searches I discovered that the cause was an invalid redirection occurring between a HTTP and a HTTPS webpage. Using binding.pry I then discovered which of the movies being scraped that was causing the error, one that had not appeared in any of the lists that had been previously generated by my tests. The problem was occurring when trying to navigate from the movie’s overview webpage to the synopsis webpage. The first was HTTP and the second was HTTPS, a situation that had not emerged with any of the previous movies.
 
I found a patch that was supposed to solve the problem but it didn’t work for me; I consulted with someone more experienced than myself but even together we couldn’t come up with a solution. Then I was inspired to try a work around. Both the overview and the synopsis webpages were identical except for the last part; the overview page ended with ‘movieoverview‘ and the synopsis page ended with ‘plotsummary’ so I just trapped the error with the ‘begin/rescue/end’ process, used the ‘sub’ method to change ‘movieoverview‘  to ‘plotsummary’ before the open call in Nokogiri, and sanity was restored; it worked! Below is a snippet of the code used:

```
def self.scrape_synopsis

		redirect_failed = false

		begin
			@doc_synop1 = Nokogiri::HTML(open(@soon.url)) # Uses the HTTP 'movieoverview' url
		rescue
			redirect_failed = true # An HTTP to HTTPS redirect failed
		end
		
		if !@doc_synop1.css("a.movie-synopsis-link").any? && !redirect_failed &&
			@doc_synop1.css("span#SynopsisTextLabel").any?
			# If not a redirect failure and a READ FULL SYNOPSIS link is not
			# present and any text is available, use the text for the synopsis
			@soon.synopsis = @doc_synop1.css("span#SynopsisTextLabel").text
		else
			# scrape the synopsis using the HTTP 'plotsummary' url
			synop_url = @soon.url.sub(/movieoverview/, 'plotsummary')
			doc_synop2 = Nokogiri::HTML(open(synop_url))
			@soon.synopsis = doc_synop2.css("p.subpage-descriptive-content").text
		end

	end
```

I was then able to publish my gem to RubyGems. Happy Days! :)

